<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一路逆风</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yilunifeng.github.io/"/>
  <updated>2017-09-19T14:36:46.816Z</updated>
  <id>https://yilunifeng.github.io/</id>
  
  <author>
    <name>一路逆风</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>随笔</title>
    <link href="https://yilunifeng.github.io/2017/09/19/%E9%9A%8F%E7%AC%94/"/>
    <id>https://yilunifeng.github.io/2017/09/19/随笔/</id>
    <published>2017-09-19T14:26:26.000Z</published>
    <updated>2017-09-19T14:36:46.816Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>能够握紧的就别放了<br>  能够拥抱的就别拉扯<br>  时间着急的 冲刷着<br>  剩下了什么<br>  原谅走过的这些曲折<br>  原来留下的都是真的<br>  纵然似梦啊 半醒着<br>  笑着哭着都快活<br>  谁让<br>  时间是让人猝不及防的东西<br>  晴时有风阴有时雨<br>  争不过朝夕 又念着往昔<br>  偷走了青丝却留住一个你<br>  岁月是一场有去无回的旅行<br>  好的坏的都是风景<br>  别怪我贪心 只是不愿醒</p>
<h2 id="因为你只为你愿和我一起"><a href="#因为你只为你愿和我一起" class="headerlink" title="  因为你只为你愿和我一起"></a>  因为你只为你愿和我一起</h2><p>看云淡风轻<br>  时间是让人猝不及防的东西<br>  晴时有风阴有时雨<br>  争不过朝夕 又念着往昔<br>  偷走了青丝却留住一个你<br>  岁月是一场有去无回的旅行<br>  好的坏的都是风景<br>  别怪我贪心 只是不愿醒<br>  因为你只为你愿和我一起<br>  看云淡风轻 </p>
</blockquote>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;能够握紧的就别放了&lt;br&gt;  能够拥抱的就别拉扯&lt;br&gt;  时间着急的 冲刷着&lt;br&gt;  剩下了什么&lt;br&gt;  原谅走过的这些曲折&lt;br&gt;  原来留下的都是真的&lt;br&gt;  纵然似梦啊 半醒着&lt;br&gt;  笑着哭着都快活&lt;br&gt;  谁让&lt;br&gt;  时间
    
    </summary>
    
    
      <category term="随笔" scheme="https://yilunifeng.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>spring重温学习笔记</title>
    <link href="https://yilunifeng.github.io/2017/09/18/spring%E9%87%8D%E6%B8%A9%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://yilunifeng.github.io/2017/09/18/spring重温学习笔记/</id>
    <published>2017-09-18T06:57:27.000Z</published>
    <updated>2017-09-18T08:38:33.630Z</updated>
    
    <content type="html"><![CDATA[<h3 id="spring-IOC"><a href="#spring-IOC" class="headerlink" title="spring IOC"></a>spring IOC</h3><h4 id="spring-中对于类加载文件的理解"><a href="#spring-中对于类加载文件的理解" class="headerlink" title="spring 中对于类加载文件的理解"></a>spring 中对于类加载文件的理解</h4><blockquote>
<p>   spring中提供了两种对于ioc容器获取bean的方式（两种访问接口）：</p>
<ul>
<li>beanFactory:通过classPathResource加载类路径下的配置文件</li>
<li>创建beanFactory对象DefaultListableBeanFactory</li>
<li>通过XmlBeanDefinitionReader对象加载BeanFactory</li>
<li>根据getBean方法得到对应实例对象</li>
</ul>
</blockquote>
<a id="more"></a>
<blockquote>
<p>   ApplicationContent接口是基于BeanFactory对象的上层实现，扩展了声明周期，事件，国际化的功能</p>
<ul>
<li>ClassPathXmlApplicationContent对象加载类文件下的bean.xml</li>
<li>或者FileSystemXmlApplicationContent对象加载文件路径下的bean.xml</li>
<li>调用ClassPathXmlApplicationContent对象实例getBean()方法取得bean</li>
<li>通过XmlBeanDefinitionReader对象加载BeanFactory</li>
<li>根据getBean方法得到对应实例对象</li>
</ul>
<ul>
<li>二者的区别：<blockquote>
<p>建议使用ClassPathXmlApplicationContent后者使用<br>在实例化bean时期不同：前者会在使用到bean是实例化bean对象<br>后者是在application初始化应用上下文时进行的对整个bean.xml中<br>单实例的bean的实例化，所以后者用时较长，但是会在使用到bean<br>实例时直接从缓存中读取实例对象，性能较高</p>
</blockquote>
</li>
</ul>
</blockquote>
<h4 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h4><blockquote>
<h5 id="Bean的生命周期："><a href="#Bean的生命周期：" class="headerlink" title="Bean的生命周期："></a>Bean的生命周期：</h5><ul>
<li>实例化 <ul>
<li>设置属性值</li>
<li>调用上下文初始化方法</li>
</ul>
</li>
<li>定制的销毁方法</li>
</ul>
</blockquote>
<hr>
<h4 id="对bean进行依赖注入-dependency-injection"><a href="#对bean进行依赖注入-dependency-injection" class="headerlink" title="对bean进行依赖注入 dependency injection"></a>对bean进行依赖注入 dependency injection</h4><blockquote>
<ul>
<li><p>设值注入需要对应的bean提供一个默认的构造函数，<br>并且对应的属性值需要setter()方法<br>spring会先调用磨人的构造函数对bean进行实例化，<br>然后调用对用的setter方法注入属性值</p>
</li>
<li><p>构造方法注入属性值<br>需要在bean对应的po中声明构造函数<br>在bean.xml中设置</p>
<pre><code>&lt;constructor-arg name=&quot;&quot; value=&quot;&quot; /&gt;
</code></pre></li>
<li><p>注入值类型<br>字面值，其他bean类型，集合类型<br>字面值直接在<value>中赋值<br>bean类型需要在xml中配置</value></p>
<pre><code>&lt;property name=&quot;elseBean&quot; ref=&quot;OrderItem&quot; /&gt;
</code></pre><p>集合类型<br>spring分别提供了/<array>、/<list>、/<set>、/<map>、/<props><br>分别对应设置类型为数组、list、set、map、propertys的集合属性值<br>在xml中配置如下：</props></map></set></list></array></p>
<pre><code>  &lt;property name=&quot;myArray&quot;&gt;
        &lt;array/list/set&gt;
            &lt;value&gt;1234&lt;value/&gt;
            &lt;ref bean=&quot;OrderItem&quot;/&gt;
        &lt;/array&gt;
&lt;/property&gt;
 &lt;property name=&quot;myMap&quot;&gt;
        &lt;map&gt;
            &lt;entry key=&quot;1&quot; value=&quot;1234&quot; /&gt;
            &lt;entry key=&quot;1&quot; value-ref=&quot;OrderItem&quot;/&gt;
        &lt;/map&gt;
 &lt;/property&gt;
 &lt;property name=&quot;myProp&quot;&gt;
        &lt;props&gt;
            &lt;prop key=&quot;1&quot;&gt;AAA&lt;/prop&gt;
            &lt;prop key=&quot;1&quot;&gt;BBB&lt;/prop&gt;
        &lt;/props&gt;
 &lt;/property&gt;
</code></pre></li>
</ul>
<p>在以上配置中，array,list,set,map都配置了两个值<br>一个字面值，一个引用，注意其中的区别</p>
<hr>
</blockquote>
<h4 id="Bean之间的关系：继承和依赖"><a href="#Bean之间的关系：继承和依赖" class="headerlink" title="Bean之间的关系：继承和依赖"></a>Bean之间的关系：继承和依赖</h4><blockquote>
<ul>
<li>继承:<pre><code>&lt;bean id=&quot;&quot; parent=&quot;&quot;/&gt;
</code></pre></li>
<li><p>依赖：</p>
<pre><code>&lt;bean id=&quot;&quot; depend-on=&quot;&quot;/&gt;
</code></pre></li>
<li><p>两种注入方式的对比：<br>对于复杂依赖关系采用更加灵活的setter注入<br>而对于赋值顺序有要求的建议采用构造注入      </p>
</li>
</ul>
</blockquote>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;spring-IOC&quot;&gt;&lt;a href=&quot;#spring-IOC&quot; class=&quot;headerlink&quot; title=&quot;spring IOC&quot;&gt;&lt;/a&gt;spring IOC&lt;/h3&gt;&lt;h4 id=&quot;spring-中对于类加载文件的理解&quot;&gt;&lt;a href=&quot;#spring-中对于类加载文件的理解&quot; class=&quot;headerlink&quot; title=&quot;spring 中对于类加载文件的理解&quot;&gt;&lt;/a&gt;spring 中对于类加载文件的理解&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;   spring中提供了两种对于ioc容器获取bean的方式（两种访问接口）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;beanFactory:通过classPathResource加载类路径下的配置文件&lt;/li&gt;
&lt;li&gt;创建beanFactory对象DefaultListableBeanFactory&lt;/li&gt;
&lt;li&gt;通过XmlBeanDefinitionReader对象加载BeanFactory&lt;/li&gt;
&lt;li&gt;根据getBean方法得到对应实例对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="spring" scheme="https://yilunifeng.github.io/tags/spring/"/>
    
      <category term="学习笔记" scheme="https://yilunifeng.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>917</title>
    <link href="https://yilunifeng.github.io/2017/09/17/917/"/>
    <id>https://yilunifeng.github.io/2017/09/17/917/</id>
    <published>2017-09-17T11:29:20.000Z</published>
    <updated>2017-09-17T11:29:20.245Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>对requestbody和responsebody注解的学习</title>
    <link href="https://yilunifeng.github.io/2017/09/08/%E5%AF%B9requestbody%E5%92%8Cresponsebody%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>https://yilunifeng.github.io/2017/09/08/对requestbody和responsebody注解的学习/</id>
    <published>2017-09-08T01:36:42.000Z</published>
    <updated>2017-09-08T01:41:49.971Z</updated>
    
    <content type="html"><![CDATA[<h3 id="她把眼泪留在落幕以后-苏濮"><a href="#她把眼泪留在落幕以后-苏濮" class="headerlink" title="她把眼泪留在落幕以后-苏濮"></a>她把眼泪留在落幕以后-苏濮</h3><blockquote>
<h4 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h4><pre><code>1. 该注解用于读取Request请求的body部分数据，使用系统默认配置的HttpMessageConverter进行解析，然后把相应的数据绑定到要返回的对象上；
2. 再把HttpMessageConverter返回的对象数据绑定到 controller中方法的参数上。
</code></pre></blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;她把眼泪留在落幕以后-苏濮&quot;&gt;&lt;a href=&quot;#她把眼泪留在落幕以后-苏濮&quot; class=&quot;headerlink&quot; title=&quot;她把眼泪留在落幕以后-苏濮&quot;&gt;&lt;/a&gt;她把眼泪留在落幕以后-苏濮&lt;/h3&gt;&lt;blockquote&gt;
&lt;h4 id=&quot;RequestB
    
    </summary>
    
    
      <category term="spring" scheme="https://yilunifeng.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>hexo搭建之对目录和标签的改造</title>
    <link href="https://yilunifeng.github.io/2017/09/07/hexo%E6%90%AD%E5%BB%BA%E4%B9%8B%E5%AF%B9%E7%9B%AE%E5%BD%95%E5%92%8C%E6%A0%87%E7%AD%BE%E7%9A%84%E6%94%B9%E9%80%A0/"/>
    <id>https://yilunifeng.github.io/2017/09/07/hexo搭建之对目录和标签的改造/</id>
    <published>2017-09-07T06:25:42.000Z</published>
    <updated>2017-09-07T06:56:57.872Z</updated>
    
    <content type="html"><![CDATA[<h4 id="标签的使用分类"><a href="#标签的使用分类" class="headerlink" title="标签的使用分类"></a>标签的使用分类</h4><blockquote>
<ul>
<li>对于标签的使用：直接在生成文章后在对应的<em>tags</em>后输入标签即可<br>例如</li>
</ul>
<blockquote>
<pre><code>title: hexo搭建之对目录和标签的改造
date: 2017-09-07 14:25:42
tags:
-日记
</code></pre><hr>
</blockquote>
<ul>
<li>对于目录的改造<br>需要对目录进行编写</li>
</ul>
</blockquote>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;标签的使用分类&quot;&gt;&lt;a href=&quot;#标签的使用分类&quot; class=&quot;headerlink&quot; title=&quot;标签的使用分类&quot;&gt;&lt;/a&gt;标签的使用分类&lt;/h4&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;对于标签的使用：直接在生成文章后在对应的&lt;em&gt;tags&lt;/e
    
    </summary>
    
    
      <category term="日记" scheme="https://yilunifeng.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>学习日记</title>
    <link href="https://yilunifeng.github.io/2017/09/06/Submit%E4%B9%8BMarkdown%E6%B5%8B%E8%AF%95/"/>
    <id>https://yilunifeng.github.io/2017/09/06/Submit之Markdown测试/</id>
    <published>2017-09-06T13:10:34.000Z</published>
    <updated>2017-09-07T06:57:28.732Z</updated>
    
    <content type="html"><![CDATA[<h2 id="九月六日的Markdown基本语法"><a href="#九月六日的Markdown基本语法" class="headerlink" title="九月六日的Markdown基本语法"></a>九月六日的Markdown基本语法</h2><blockquote>
<h3 id="标题段落应用语法学习"><a href="#标题段落应用语法学习" class="headerlink" title="标题段落应用语法学习"></a>标题段落应用语法学习</h3><ul>
<li>关于标题和段落格式</li>
</ul>
<p>文章标题要以#开头,任意与否对称结束- -<br> 文章标题以#与h1-h6对称</p>
<ul>
<li><p>关于引用使用&gt;来引用，以及二级引用使用&gt;&gt;<br>使用其来控制样式</p>
</li>
<li><p>关于代码块的格式</p>
</li>
</ul>
</blockquote>
<pre><code>这是一个代码块。
 return shell_exec(&quot;echo $input | $markdown_script&quot;);
</code></pre><hr>
<a id="more"></a>
<blockquote>
<ol>
<li>这是第一行列表项。</li>
<li><p>这是第二行列表项。</p>
<p>给出一些例子代码：</p>
</li>
</ol>
</blockquote>
<pre><code>可爱的小晨晨i
</code></pre><hr>
<p>this is a <a href="http://baidu.com/&quot;该链接指向百度&quot;" target="_blank" rel="external">Baidu</a> inline link</p>
<pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);
</code></pre><blockquote>
<p>   <a href="http://baidu.com" target="_blank" rel="external">Baidu</a><br>   <img src="http://ovuz7fiq5.bkt.clouddn.com/chenchen.jpg" alt="baidu"></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;九月六日的Markdown基本语法&quot;&gt;&lt;a href=&quot;#九月六日的Markdown基本语法&quot; class=&quot;headerlink&quot; title=&quot;九月六日的Markdown基本语法&quot;&gt;&lt;/a&gt;九月六日的Markdown基本语法&lt;/h2&gt;&lt;blockquote&gt;
&lt;h3 id=&quot;标题段落应用语法学习&quot;&gt;&lt;a href=&quot;#标题段落应用语法学习&quot; class=&quot;headerlink&quot; title=&quot;标题段落应用语法学习&quot;&gt;&lt;/a&gt;标题段落应用语法学习&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;关于标题和段落格式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文章标题要以#开头,任意与否对称结束- -&lt;br&gt; 文章标题以#与h1-h6对称&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;关于引用使用&amp;gt;来引用，以及二级引用使用&amp;gt;&amp;gt;&lt;br&gt;使用其来控制样式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关于代码块的格式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;这是一个代码块。
 return shell_exec(&amp;quot;echo $input | $markdown_script&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
    
    </summary>
    
    
      <category term="日记" scheme="https://yilunifeng.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>搭建HEXO托管至Github之一</title>
    <link href="https://yilunifeng.github.io/2017/09/06/%E6%90%AD%E5%BB%BAHEXO%E6%89%98%E7%AE%A1%E8%87%B3Github%E4%B9%8B%E4%B8%80/"/>
    <id>https://yilunifeng.github.io/2017/09/06/搭建HEXO托管至Github之一/</id>
    <published>2017-09-06T10:42:53.000Z</published>
    <updated>2017-09-06T11:20:45.375Z</updated>
    
    <content type="html"><![CDATA[<p>搭建过程：坑坑洼洼！真的是醉了，都是坑啊！<br>    现在要实现的功能是百度统计和评论功能，摸索一下 - -</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搭建过程：坑坑洼洼！真的是醉了，都是坑啊！&lt;br&gt;    现在要实现的功能是百度统计和评论功能，摸索一下 - -&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>article title</title>
    <link href="https://yilunifeng.github.io/2017/09/05/article-title/"/>
    <id>https://yilunifeng.github.io/2017/09/05/article-title/</id>
    <published>2017-09-05T13:10:34.000Z</published>
    <updated>2017-09-07T06:31:15.401Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>   今天是我的blog的诞生日，真的很高兴！<br>   以后可以用来书写笔记，记录代码过程中的问题与总结，分享生活上的乐趣和看法经验<br>  ，真是居家旅行、杀人越货、谋财害命之必备佳品！<br>   哈哈，以后可以记录生活点滴，nice!</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;   今天是我的blog的诞生日，真的很高兴！&lt;br&gt;   以后可以用来书写笔记，记录代码过程中的问题与总结，分享生活上的乐趣和看法经验&lt;br&gt;  ，真是居家旅行、杀人越货、谋财害命之必备佳品！&lt;br&gt;   哈哈，以后可以记录生活点滴，nice!&lt;
    
    </summary>
    
    
      <category term="生活点滴" scheme="https://yilunifeng.github.io/tags/%E7%94%9F%E6%B4%BB%E7%82%B9%E6%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://yilunifeng.github.io/2017/09/05/hello-world/"/>
    <id>https://yilunifeng.github.io/2017/09/05/hello-world/</id>
    <published>2017-09-05T12:58:24.622Z</published>
    <updated>2017-09-05T12:58:24.622Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
